from ... import molecule
from ...anm import ANM, hdANM

from os import remove as rm

import unittest
import numpy
import logging

class Test_ANM(unittest.TestCase):

    def setUp(self):
        self.mol = molecule.load_structure('packman/tests/data/4hla.cif',ftype='cif')
        self.calpha = [i for i in self.mol[0].get_calpha() if i is not None]

    def test_hdANM(self):
        self.Model=hdANM(self.calpha,dr=15,power=0,hng_file='packman/tests/data/4hla.hng')
        self.assertTrue( self.Model.calculate_hessian() )
        self.assertTrue( self.Model.calculate_decomposition() )

        expected_hdanm_ev = [-1.72218106e-13+0.j,-1.40853721e-14+0.j,-2.74269522e-15+0.j,-1.00326516e-15+0.j,1.71452239e-15+0.j,2.07120343e-14+0.j,1.87558989e+00+0.j,2.68322756e+00+0.j,4.64591046e+00+0.j,5.80975654e+00+0.j,6.58584875e+00+0.j,6.61926025e+00+0.j,7.15342133e+00+0.j,7.74785676e+00+0.j,8.16912263e+00+0.j,8.51367669e+00+0.j,8.58769956e+00+0.j,8.74943002e+00+0.j,9.24653551e+00+0.j,9.52015126e+00+0.j,9.96849023e+00+0.j,1.06116363e+01+0.j,1.08924836e+01+0.j,1.16317398e+01+0.j,1.17193495e+01+0.j,1.19594425e+01+0.j,1.20755287e+01+0.j,1.24886138e+01+0.j,1.25044741e+01+0.j,1.26618544e+01+0.j,1.32787275e+01+0.j,1.35980622e+01+0.j,1.38119397e+01+0.j,1.41807841e+01+0.j,1.44533615e+01+0.j,1.46373978e+01+0.j,1.47193552e+01+0.j,1.48033059e+01+0.j,1.50476921e+01+0.j,1.51991203e+01+0.j,1.54675975e+01+0.j,1.57301103e+01+0.j,1.58555740e+01+0.j,1.60315042e+01+0.j,1.62176656e+01+0.j,1.63732369e+01+0.j,1.65663883e+01+0.j,1.67625193e+01+0.j,1.68724560e+01+0.j,1.70114925e+01+0.j,1.71896741e+01+0.j,1.76069017e+01+0.j,1.79581740e+01+0.j,1.81896041e+01+0.j,1.81975289e+01+0.j,1.83241476e+01+0.j,1.84373334e+01+0.j,1.86499454e+01+0.j,1.88011402e+01+0.j,1.88800039e+01+0.j,1.90480922e+01+0.j,1.93904199e+01+0.j,1.95538276e+01+0.j,1.99219811e+01+0.j,2.00238782e+01+0.j,2.01725825e+01+0.j,2.04351743e+01+0.j,2.06377822e+01+0.j,2.09393469e+01+0.j,2.10918148e+01+0.j,2.13444859e+01+0.j,2.15512079e+01+0.j,2.16006708e+01+0.j,2.19285612e+01+0.j,2.20351273e+01+0.j,2.23448933e+01+0.j,2.24007834e+01+0.j,2.26849894e+01+0.j,2.29165532e+01+0.j,2.29818762e+01+0.j,2.32603011e+01+0.j,2.33184305e+01+0.j,2.38283744e+01+0.j,2.39399917e+01+0.j,2.43288078e+01+0.j,2.44948328e+01+0.j,2.46165694e+01+0.j,2.49137483e+01+0.j,2.49898709e+01+0.j,2.50212765e+01+0.j,2.51630217e+01+0.j,2.52782607e+01+0.j,2.54369525e+01+0.j,2.57744006e+01+0.j,2.60527160e+01+0.j,2.64217540e+01+0.j,2.65195196e+01+0.j,2.67853378e+01+0.j,2.68882247e+01+0.j,2.72491890e+01+0.j,2.74582404e+01+0.j,2.77133364e+01+0.j,2.79434179e+01+0.j,2.80780357e+01+0.j,2.83124798e+01+0.j,2.87173764e+01+0.j,2.89397384e+01+0.j,2.90983955e+01+0.j,2.94108903e+01+0.j,2.95111599e+01+0.j,3.00608684e+01+0.j,3.01673236e+01+0.j,3.03283725e+01+0.j,3.05676129e+01+0.j,3.07582451e+01+0.j,3.10678722e+01+0.j,3.20076204e+01+0.j,3.21321326e+01+0.j,3.23131464e+01+0.j,3.24055035e+01+0.j,3.28032888e+01+0.j,3.29349654e+01+0.j,3.35456225e+01+0.j,3.52091603e+01+0.j,3.59433948e+01+0.j,3.66032768e+01+0.j]
        expected_hdanm_ev = numpy.array(expected_hdanm_ev)

        # Are the eigenvalues almost same? everything else tends to be equal if so.
        self.assertTrue( numpy.allclose(self.Model.get_eigenvalues(), expected_hdanm_ev, rtol=1e-7, atol=1e-7) )
        
        self.assertIsNotNone( self.Model.get_eigenvalues() )
        self.assertIsNotNone( self.Model.get_eigenvectors() )

        self.assertTrue( self.Model.calculate_movie(6,scale=2,n=10) )
        self.assertTrue( self.Model.calculate_movie(6,scale=2,n=10, ftype='pdb') )
        rm('6.cif')
        rm('6.pdb')

        self.assertIsNotNone( self.Model.get_hessian_pseudoinverse() )
        self.assertIsNotNone( self.Model.get_RT_eigen_vectors() )

        #Add corsscorrelation after the publication
        #self.assertIsNotNone( [i for i in self.Model.get_crosscorrelation_matrix()] )
    
    def test_ANM_Compliance(self):
        self.ANM_MODEL = ANM(self.calpha)

        self.assertTrue( self.ANM_MODEL.calculate_hessian() )
        self.assertTrue( self.ANM_MODEL.calculate_decomposition() )
        self.assertTrue( self.ANM_MODEL.calculate_stiffness_compliance() )
        self.assertTrue( self.ANM_MODEL.calculate_fluctuations() )

        expected_ev = [-1.41775327e-14,-8.32642413e-15,-4.20409163e-15,-1.45263965e-15,1.13859514e-15,3.14174543e-15,7.01731769e-01,7.89950898e-01,1.68076884e+00,2.05051021e+00,2.16876960e+00,2.49329201e+00,3.00422628e+00,3.04638308e+00,3.07914739e+00,3.15128205e+00,3.54554462e+00,3.61333274e+00,3.71712574e+00,3.98394786e+00,4.12234390e+00,4.28208630e+00,4.50621451e+00,4.55601937e+00,4.62311354e+00,4.84697831e+00,4.89784909e+00,4.95780168e+00,5.04211047e+00,5.12545795e+00,5.29845556e+00,5.48161254e+00,5.55848407e+00,5.78271363e+00,5.93827272e+00,6.03614781e+00,6.12762145e+00,6.31613645e+00,6.40717321e+00,6.50177982e+00,6.54710500e+00,6.64385813e+00,6.69499745e+00,6.74245046e+00,6.75480518e+00,6.77277163e+00,6.93715272e+00,6.98695721e+00,7.13407622e+00,7.20042485e+00,7.31234974e+00,7.45329063e+00,7.49635340e+00,7.56915448e+00,7.65245726e+00,7.68012591e+00,7.79727364e+00,7.85832424e+00,7.91223213e+00,8.04638539e+00,8.08879216e+00,8.16568942e+00,8.21555414e+00,8.31514435e+00,8.35119498e+00,8.42798461e+00,8.49735551e+00,8.56710976e+00,8.69618792e+00,8.75595005e+00,8.80340537e+00,8.92219932e+00,8.96197080e+00,8.99998516e+00,9.08795367e+00,9.12078166e+00,9.15996278e+00,9.23721521e+00,9.32587932e+00,9.35726288e+00,9.42491400e+00,9.53182375e+00,9.55200269e+00,9.60243398e+00,9.66061444e+00,9.74964465e+00,9.86531839e+00,9.93298204e+00,9.96448966e+00,9.98837236e+00,1.00222668e+01,1.00382919e+01,1.00624880e+01,1.01347583e+01,1.01605542e+01,1.02043563e+01,1.02272589e+01,1.02553552e+01,1.02882907e+01,1.03546924e+01,1.04021444e+01,1.05143010e+01,1.05186618e+01,1.05680725e+01,1.06208162e+01,1.06378861e+01,1.06893434e+01,1.07432667e+01,1.07718540e+01,1.07820323e+01,1.08379870e+01,1.09080797e+01,1.09173880e+01,1.09824528e+01,1.09994481e+01,1.10151690e+01,1.10969333e+01,1.11019771e+01,1.11716510e+01,1.12206397e+01,1.12579029e+01,1.12805352e+01,1.13008292e+01,1.13409221e+01,1.14024498e+01,1.14361051e+01,1.14980993e+01,1.15263936e+01,1.15605706e+01,1.16076533e+01,1.16201586e+01,1.16496430e+01,1.16786719e+01,1.16925163e+01,1.17656367e+01,1.18532400e+01,1.19145710e+01,1.19417151e+01,1.19951257e+01,1.20191352e+01,1.20633420e+01,1.20794167e+01,1.20858464e+01,1.21236149e+01,1.21292240e+01,1.22017269e+01,1.22086136e+01,1.22642441e+01,1.22752970e+01,1.23242795e+01,1.23579909e+01,1.23750555e+01,1.24003556e+01,1.24812495e+01,1.25323280e+01,1.25698801e+01,1.25881889e+01,1.26584177e+01,1.26934836e+01,1.27488723e+01,1.27830637e+01,1.27900120e+01,1.28467513e+01,1.28564863e+01,1.28950933e+01,1.29284795e+01,1.29460829e+01,1.29925569e+01,1.30118275e+01,1.30231226e+01,1.30541702e+01,1.30738479e+01,1.31112657e+01,1.31631846e+01,1.32080007e+01,1.32276103e+01,1.32911256e+01,1.33107034e+01,1.33286108e+01,1.33692664e+01,1.33819163e+01,1.33928362e+01,1.33998167e+01,1.34801125e+01,1.34973121e+01,1.35262148e+01,1.35372051e+01,1.35538367e+01,1.35751214e+01,1.35914853e+01,1.36383069e+01,1.36741274e+01,1.36850568e+01,1.37152998e+01,1.37187159e+01,1.37563510e+01,1.37759228e+01,1.38127825e+01,1.38325486e+01,1.38475171e+01,1.38565011e+01,1.38768802e+01,1.38936566e+01,1.39049779e+01,1.39273369e+01,1.39415484e+01,1.39976106e+01,1.40069464e+01,1.40332756e+01,1.40454513e+01,1.40652899e+01,1.41051256e+01,1.41303009e+01,1.41446415e+01,1.41678009e+01,1.41792083e+01,1.41825327e+01,1.41917052e+01,1.42487744e+01,1.42641492e+01,1.43221674e+01,1.43379017e+01,1.43679220e+01,1.43986242e+01,1.44119633e+01,1.44337937e+01,1.44693886e+01,1.45049912e+01,1.45240449e+01,1.45614105e+01,1.45757747e+01,1.45930020e+01,1.46210314e+01,1.46491248e+01,1.46643886e+01,1.46830563e+01,1.47690491e+01,1.47845287e+01,1.48017125e+01,1.48365873e+01,1.48537377e+01,1.48578886e+01,1.49152644e+01,1.49243306e+01,1.49451848e+01,1.49862183e+01,1.49899887e+01,1.50295148e+01,1.50601259e+01,1.50805692e+01,1.50868330e+01,1.50994657e+01,1.51470787e+01,1.51614797e+01,1.51906101e+01,1.52038441e+01,1.52618946e+01,1.53175909e+01,1.53508948e+01,1.53774639e+01,1.53870929e+01,1.54201657e+01,1.54232650e+01,1.54602458e+01,1.54837612e+01,1.55265286e+01,1.55469752e+01,1.55790197e+01,1.56004771e+01,1.56144954e+01,1.56336475e+01,1.56708421e+01,1.56858925e+01,1.57125823e+01,1.57651182e+01,1.57828073e+01,1.58033532e+01,1.58077121e+01,1.58339544e+01,1.58504098e+01,1.58529015e+01,1.58879606e+01,1.59111588e+01,1.59288585e+01,1.59669334e+01,1.59836563e+01,1.59928716e+01,1.60065977e+01,1.60305611e+01,1.60356016e+01,1.60539150e+01,1.60803312e+01,1.60888304e+01,1.61084633e+01,1.61239796e+01,1.61331345e+01,1.61642176e+01,1.62007590e+01,1.62363673e+01,1.62641823e+01,1.62809986e+01,1.62930982e+01,1.63283600e+01,1.63542078e+01,1.63695312e+01,1.64007288e+01,1.64108605e+01,1.64250297e+01,1.64391067e+01,1.64599692e+01,1.65020220e+01,1.65236820e+01,1.65534436e+01,1.65982612e+01,1.66261526e+01,1.66555330e+01,1.66763289e+01,1.66947722e+01,1.67178610e+01,1.67326541e+01,1.67438411e+01,1.67626079e+01,1.68161593e+01,1.68285465e+01,1.68478714e+01,1.68872207e+01,1.69099134e+01,1.69518126e+01,1.69610296e+01,1.69719008e+01,1.70102132e+01,1.70224865e+01,1.70638942e+01,1.70961141e+01,1.71042293e+01,1.71431670e+01,1.71536518e+01,1.71943643e+01,1.72354652e+01,1.72652696e+01,1.72983366e+01,1.73184630e+01,1.73328699e+01,1.73546601e+01,1.73838469e+01,1.74119542e+01,1.74146405e+01,1.74639467e+01,1.74692982e+01,1.74864739e+01,1.75220373e+01,1.75391647e+01,1.75539749e+01,1.75617035e+01,1.76060471e+01,1.76191814e+01,1.76546254e+01,1.76734538e+01,1.77034925e+01,1.77365859e+01,1.77669967e+01,1.78054922e+01,1.78260283e+01,1.78342009e+01,1.78654453e+01,1.78976382e+01,1.79212530e+01,1.79774642e+01,1.79983874e+01,1.80143244e+01,1.80328135e+01,1.80657373e+01,1.80955391e+01,1.81300985e+01,1.81447094e+01,1.81632278e+01,1.81914686e+01,1.82307193e+01,1.82610896e+01,1.82775480e+01,1.82909651e+01,1.83122608e+01,1.83540948e+01,1.83980724e+01,1.84225054e+01,1.84551930e+01,1.84868013e+01,1.85201492e+01,1.85907639e+01,1.86260216e+01,1.86508364e+01,1.86673202e+01,1.86813838e+01,1.87264318e+01,1.87719967e+01,1.88039581e+01,1.88221425e+01,1.88532234e+01,1.89060125e+01,1.89310724e+01,1.89869517e+01,1.89978030e+01,1.90476498e+01,1.90716619e+01,1.90990468e+01,1.91561610e+01,1.92243689e+01,1.92599081e+01,1.92842158e+01,1.93531966e+01,1.93623547e+01,1.93831030e+01,1.94468803e+01,1.94810591e+01,1.94911369e+01,1.95075086e+01,1.95353816e+01,1.95775964e+01,1.96280331e+01,1.96573165e+01,1.97051671e+01,1.97322309e+01,1.97401943e+01,1.97933599e+01,1.98237558e+01,1.98693997e+01,1.99159849e+01,1.99541478e+01,1.99824754e+01,1.99895960e+01,2.00228194e+01,2.00844721e+01,2.01282519e+01,2.02189747e+01,2.02568825e+01,2.02739201e+01,2.03412377e+01,2.03461681e+01,2.03926188e+01,2.04383380e+01,2.04779580e+01,2.05265178e+01,2.05574517e+01,2.06066575e+01,2.06904996e+01,2.07682354e+01,2.07831167e+01,2.08581449e+01,2.08745354e+01,2.09138116e+01,2.09555867e+01,2.10858203e+01,2.10962102e+01,2.11368582e+01,2.11916499e+01,2.12412601e+01,2.12875880e+01,2.13168857e+01,2.13567197e+01,2.14441579e+01,2.14665546e+01,2.15474872e+01,2.15861083e+01,2.16644752e+01,2.17091585e+01,2.17365917e+01,2.17869367e+01,2.18543128e+01,2.18903917e+01,2.19594777e+01,2.19657413e+01,2.19816479e+01,2.20074155e+01,2.20427445e+01,2.21025291e+01,2.22161894e+01,2.23197222e+01,2.24061520e+01,2.24608548e+01,2.25051509e+01,2.25604642e+01,2.27259594e+01,2.27391088e+01,2.27670964e+01,2.29225965e+01,2.29845081e+01,2.29987063e+01,2.30439254e+01,2.30708713e+01,2.32108949e+01,2.32406027e+01,2.32722261e+01,2.33556682e+01,2.33701283e+01,2.35350005e+01,2.35407853e+01,2.36692809e+01,2.37581788e+01,2.38159571e+01,2.38225630e+01,2.39071349e+01,2.39738530e+01,2.40413094e+01,2.41182906e+01,2.41389351e+01,2.41812323e+01,2.42655837e+01,2.43086871e+01,2.44469664e+01,2.45486582e+01,2.46003675e+01,2.47142220e+01,2.48006849e+01,2.48081412e+01,2.49206251e+01,2.49912693e+01,2.50420369e+01,2.50722906e+01,2.51146008e+01,2.53388647e+01,2.53821986e+01,2.54616660e+01,2.55014576e+01,2.55832319e+01,2.57452913e+01,2.58229694e+01,2.59085725e+01,2.60257421e+01,2.60988065e+01,2.61508839e+01,2.63172117e+01,2.63285036e+01,2.64239943e+01,2.65956612e+01,2.66210289e+01,2.67181003e+01,2.67416435e+01,2.68571275e+01,2.69282394e+01,2.70470525e+01,2.71075418e+01,2.72111519e+01,2.73159476e+01,2.74317850e+01,2.75955678e+01,2.76384931e+01,2.77686672e+01,2.78966232e+01,2.80700485e+01,2.81151384e+01,2.82475207e+01,2.82816121e+01,2.84188334e+01,2.85365409e+01,2.86893881e+01,2.87731578e+01,2.89037537e+01,2.89815123e+01,2.90454918e+01,2.90911849e+01,2.91682933e+01,2.93428237e+01,2.95756810e+01,2.98327650e+01,2.98524057e+01,3.00111680e+01,3.01323504e+01,3.02150071e+01,3.03429775e+01,3.05731363e+01,3.07102703e+01,3.08493191e+01,3.11545886e+01,3.17389550e+01,3.18204690e+01,3.19598415e+01,3.21745665e+01,3.23717212e+01,3.25741100e+01,3.26427177e+01,3.27712672e+01,3.31015475e+01,3.37014039e+01,3.39269383e+01,3.43461897e+01,3.45571252e+01,3.50176318e+01,3.55021425e+01,3.70578812e+01,3.80674019e+01,3.85944467e+01,3.95661448e+01,4.11580470e+01,4.13755534e+01]
        expected_ev = numpy.array(expected_ev)

        # Are the eigenvalues almost same? everything else tends to be equal if so.
        self.assertTrue( numpy.allclose(self.ANM_MODEL.get_eigenvalues(), expected_ev, rtol=1e-7, atol=1e-7) )
        
        self.assertIsNotNone( self.ANM_MODEL.get_stiffness_map() )
        self.assertIsNotNone( self.ANM_MODEL.get_compliance_map() )

        self.assertIsNotNone( self.ANM_MODEL.get_fluctuations() )
        self.assertIsNotNone( self.ANM_MODEL.get_stiffness_profile() )
        self.assertIsNotNone( self.ANM_MODEL.get_compliance_profile() )

    def tearDown(self):
        logging.info('ANM, hdANM and Compliance Test Done.')

if(__name__=='__main__'):
    unittest.main()